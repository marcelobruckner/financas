apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: financas-deployment
  name: financas-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: financas-deployment
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: financas-deployment
    spec:
      containers:
      - image: marcelobruckner/financas-api:3.6
        name: financas-api
        ports:
        - containerPort: 8080
        
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mysql-secret 
              key: database-url

        - name: DATABASE_USER
          valueFrom: 
            secretKeyRef:
              name: mysql-secret
              key: database-user

        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: database-password
        resources:
          limits:
            cpu: "0.75"
            memory: 512Mi
          requests:
            cpu: "0.50"
            memory: 256Mi
        livenessProbe: # Aqui é onde vamos adicionar a nossa livenessProbe
          httpGet: # Aqui vamos utilizar o httpGet, onde vamos se conectar ao container através do protocolo HTTP
            path: /actuator/health # Qual o endpoint que vamos utilizar para se conectar ao container
            port: 8080 # Qual porta TCP vamos utilizar para se conectar ao container
          initialDelaySeconds: 40 # Quantos segundos vamos esperar para executar a primeira verificação
          periodSeconds: 15 # A cada quantos segundos vamos executar a verificação
          timeoutSeconds: 15 # Quantos segundos vamos esperar para considerar que a verificação falhou
          failureThreshold: 3 # Quantos falhas consecutivas vamos aceitar antes de reiniciar o container
          successThreshold: 1
        #readinessProbe: # Onde definimos a nossa probe de prontidão
        #  httpGet: # O tipo de teste que iremos executar, neste caso, iremos executar um teste HTTP
        #    path: / # O caminho que iremos testar
        #    port: 8080 # A porta que iremos testar
        #  initialDelaySeconds: 40 # O tempo que iremos esperar para executar a primeira vez a probe
        #  periodSeconds: 15 # De quanto em quanto tempo iremos executar a probe
        #  timeoutSeconds: 5 # O tempo que iremos esperar para considerar que a probe falhou
        #  successThreshold: 1 # O número de vezes que a probe precisa passar para considerar que o container está pronto
        #  failureThreshold: 3 # O número de vezes que a probe precisa falhar para considerar que o container não está pronto
        #startupProbe: # Onde definimos a nossa probe de inicialização
        #  exec: # O tipo exec é utilizado quando queremos executar algo dentro do container.
        #    command: # Onde iremos definir qual comando iremos executar
        #      - curl
        #      - -f
        #      - http://localhost:8080/
        #  initialDelaySeconds: 20 # O tempo que iremos esperar para executar a primeira vez a probe
        #  periodSeconds: 10 # De quanto em quanto tempo iremos executar a probe
        #  timeoutSeconds: 5 # O tempo que iremos esperar para considerar que a probe falhou
        #  successThreshold: 1 # O número de vezes que a probe precisa passar para considerar que o container está pronto
        #  failureThreshold: 1 # O número de vezes que a probe precisa falhar para considerar que o container não está pronto  